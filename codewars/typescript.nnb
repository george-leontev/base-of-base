{
    "cells": [
        {
            "language": "typescript",
            "source": [
                "function gooseFilter (birds: string[]): string[] {\r\n    const geese: string[] = [\"African\", \"Roman Tufted\", \"Toulouse\", \"Pilgrim\", \"Steinbacher\"];\r\n    \r\n    return birds.filter(b => !geese.includes(b));\r\n}\r\n\r\ngooseFilter([\"Mallard\", \"Hook Bill\", \"African\", \"Crested\", \"Pilgrim\", \"Toulouse\", \"Blue Swedish\"]);"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "function findMultiples(integer: number, limit: number): number[] {\r\n    return [...Array(Math.floor(limit / integer))].map((_, i) => integer * (i + 1));\r\n}\r\n\r\nfindMultiples(11, 54);\r\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "/*\r\n100, if a grade for the exam is more than 90 or if a number of completed projects more than 10.\r\n90, if a grade for the exam is more than 75 and if a number of completed projects is minimum 5.\r\n75, if a grade for the exam is more than 50 and if a number of completed projects is minimum 2.\r\n0, in other cases\r\n*/\r\n\r\nexport function finalGrade (exam: number, projects: number): number {\r\n    return (\r\n        exam > 90 || projects > 10 \r\n        ? 100 \r\n        : (\r\n            exam > 75 && projects >= 5 \r\n            ? 90 \r\n            : (\r\n                exam > 50 && projects >= 2 \r\n                ? 75 \r\n                : 0\r\n            )\r\n        )\r\n    );\r\n}\r\n\r\n  finalGrade(85, 5)"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "function between(a: number, b: number): number[] {\r\n    return [...Array(b - a + 1)].map((_, i) => a  + i);\r\n}\r\n\r\nbetween(1, 4)\r\nbetween(-2, 2)"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "function betterThanAverage(classPoints: number[], yourPoints: number) : boolean {\r\n    return yourPoints > classPoints.reduce((p, c) => p + c) / classPoints.length;\r\n}\r\n\r\nbetterThanAverage([100, 40, 34, 57, 29, 72, 57, 88], 75)\r\nconst arr = [100, 40, 34, 57, 29, 72, 57, 88];\r\n\r\nconst a = arr.reduce((p, c) => p + c) / arr.length;\r\na"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "\r\nfunction correct(s: string): string {\r\n    const mapper: { [Key: string]: string } = {\r\n        '0': 'O',\r\n        '5': 'S',\r\n        '1': 'I'\r\n    };\r\n    \r\n    return Array.from(s).map(c => mapper[c] ?? c).reduce((p, c) => `${p}${c}`);\r\n}\r\n\r\ncorrect(\"L0ND0N\")\r\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "function powersOfTwo(n:number):number[]{\r\n    return [...Array(n + 1)].map((_, i) => Math.pow(2, i));\r\n}\r\n\r\npowersOfTwo(0);\r\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "function index(array: number[], n: number): number {\r\n\r\n    return array.length -1 > n ? Math.pow(array[n], n)  : -1;\r\n}\r\n\r\nindex([1, 2, 3, 4], 2)"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const testEven = (n : number) : boolean => {\r\n    return n % 2 === 0\r\n}\r\n\r\ntestEven(1.5)"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "// https://www.codewars.com/kata/55fd2d567d94ac3bc9000064/typescript\r\n// 1\r\n// 3     5\r\n// 7     9    11\r\n// 13    15    17    19\r\n// 21    23    25    27    29\r\n// const n = 5;\r\n// [...Array(n)].map((_, i) => [...Array(i + 1)].map((_, j) =>  i * (i + 1) + 1 + 2 * j);\r\n// for(let i = 0; i <= n; i++)\r\n// {\r\n//     console.log( [...Array(i + 1)].map((_, j) =>  i * (i + 1) + 1 + 2 * j))\r\n// }\r\nconst i = 101;\r\n\r\n[...Array(i)].map((_, j) => (i - 1) * i + 1 + 2 * j).reduce((p, c) => p + c)"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "function twoSort(s: string[]): string {\r\n    return  Array.from(s.sort().find(_ => true) ?? String()).reduce((p, c) => `${p}***${c}`);\r\n}\r\n\r\ntwoSort([\"bitcoin\", \"take\", \"over\", \"the\", \"world\", \"maybe\", \"who\", \"knows\", \"perhaps\"])\r\n// 'b***i***t***c***o***i***n'\r\n\r\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "function warnTheSheep(queue: string[]): any {\r\n    const wolf_index = queue.findIndex(i => i === 'wolf');\r\n    const last_index = queue.length - 1\r\n    \r\n    return wolf_index < last_index \r\n    ? `Oi! Sheep number ${last_index - wolf_index }! You are about to be eaten by a wolf!`\r\n    : 'Pls go away and stop eating my sheep';\r\n}\r\n\r\nwarnTheSheep([\"sheep\", \"sheep\", \"wolf\"]);"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "function howManyLightsabersDoYouOwn(name?: any): number {\r\n    return name && name === 'Zach' ? 18 : 0;\r\n}\r\n\r\nhowManyLightsabersDoYouOwn()"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "function xo(str: string) : boolean {\r\n    const arr = Array.from(str.toLowerCase());\r\n    \r\n    return arr.filter(c => c === 'x').length === arr.filter(c => c === 'o').length;\r\n}\r\n  \r\n  xo(\"oxomx\")"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "function hello(name = ''): string {\r\n    return `Hello, ${(name ? `${name.charAt(0).toUpperCase()}${name.substring(1).toLowerCase()}` : 'World')}!`;\r\n}\r\nhello('johN')"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "function hero(bullets: number, dragons: number): boolean {\r\n    return bullets / dragons >= 2;\r\n}\r\n\r\nhero(100, 40)"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const minValue = (values: number[]): number => {\r\n    return  [... new Set(values)].sort((a, b) => b > a ? 0 : -1).reduce((p, c, i) => p +  c * 10 ** i);\r\n};\r\n\r\nminValue([4, 8, 1, 4])"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m148\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "function number(array: string[]): string[] {\r\n    return array.map((v, i) => `${i + 1}: ${v}`);\r\n}\r\n\r\nnumber([\"a\", \"b\", \"c\"])\r\nnumber([])\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "export function goals (laLigaGoals:number, copaDelReyGoals:number, championsLeagueGoals:number): number {\r\n    //show me the goals!\r\n  }"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const s1 = [\"ejjjjmmtthh\", \"zxxuueeg\", \"aanlljrrrxx\", \"dqqqaaabbb\", \"oocccffuucccjjjkkkjyyyeehh\"];\r\nconst s2 = [\"bbbaaayddqbbrrrv\"];\r\n\r\nconst mxdiflg = (a1: string[], a2: string[]): number => {\r\n    \r\n    if(a1.length === 0 || a2.length === 0)\r\n        return -1;\r\n\r\n    const sorted_a1 = a1.sort((a, b) => b.length - a.length);\r\n    const sorted_a2 = a2.sort((a, b) => b.length - a.length);\r\n\r\n    \r\n    return (sorted_a1[0].length > sorted_a2[0].length ? sorted_a1[0].length : sorted_a2[0].length) - \r\n        (sorted_a1[sorted_a1.length - 1].length < sorted_a2[sorted_a2.length - 1].length ? sorted_a1[sorted_a1.length - 1].length : sorted_a2[sorted_a2.length - 1].length)\r\n    \r\n}\r\n\r\nmxdiflg(s1, s2)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m18\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "function findDifference(a: [number, number, number], b: [number, number, number]): number {\r\n    return Math.abs(a.reduce((p, c) => p * c) - b.reduce((p, c) => p * c) );\r\n}\r\n\r\nfindDifference([3, 2, 5], [1, 4, 4])"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m14\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "function capitalize(s: string) {\r\n    return [0, 1].map(j => Array.from(s).map((v, i) => i % 2 === j ? v.toUpperCase() : v).join(''))\r\n}\r\n\r\ncapitalize(\"abcdef\")"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[32m'AbCdEf'\u001b[39m,",
                                "  \u001b[32m'aBcDeF'\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "function toBinary(n: number): number {\r\n    let bin = 0;\r\n    let counter = 0\r\n\r\n    while (n !== 0) {\r\n        const r = n % 2;\r\n        n = (n - r) / 2;\r\n        bin = bin + r * (10 ** counter++)\r\n    }\r\n\r\n    return bin;\r\n}\r\n\r\ntoBinary(111)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m1101111\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "function multipleOfIndex(array: number[]): number[] {\r\n    return array.filter((v, i) => v % i === 0)\r\n}\r\n\r\nmultipleOfIndex([22, -6, 32, 82, 9, 25])"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[33m-6\u001b[39m,",
                                "  \u001b[33m32\u001b[39m,",
                                "  \u001b[33m25\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "function solution(nums: number[]): number[] {\r\n    return nums.sort((a, b) => a - b);\r\n}\r\n\r\nsolution([1, 2, 10, 50, 5])"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[33m1\u001b[39m,",
                                "  \u001b[33m2\u001b[39m,",
                                "  \u001b[33m5\u001b[39m,",
                                "  \u001b[33m10\u001b[39m,",
                                "  \u001b[33m50\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "function divisors(n: number) {\r\n    let count = 1;\r\n    let divider = 1;\r\n\r\n    while (divider < n) {\r\n        if (n % divider === 0) {\r\n            count++;\r\n        }\r\n        divider++;\r\n    }\r\n\r\n    return count;\r\n}\r\n\r\ndivisors(64)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m7\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "function isUpperCase(str: string) {\r\n    return Array.from(str).every(c => c === c.toUpperCase());\r\n}\r\n\r\nisUpperCase('DONALD')"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33mtrue\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "export function main (verb: string, noun: string): string {\r\n  return `${verb.trim()} ${noun.trim()}`;\r\n}"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "function duplicateEncode(word: string){\r\n    const arr = Array.from(word.toLowerCase());\r\n\r\n    return arr\r\n        .map(s => arr.reduce((c, v) => (v === s ? c + 1 : c), 0))\r\n        .map(n => n === 1 ? '(' : ')')\r\n        .join('')\r\n}\r\n\r\nduplicateEncode(\"Success\")"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[32m')())())'\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "function checkForFactor(base: number, factor: number) {\r\n    return base % factor === 0;\r\n}"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "function toAlternatingCase(s: string): string {\r\n    return Array.from(s).map(c => c === c.toLowerCase() ? c.toUpperCase() : c.toLowerCase()).join('');\r\n}\r\n\r\ntoAlternatingCase(\"HeLLo WoRLD\");"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[32m'hEllO wOrld'\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}