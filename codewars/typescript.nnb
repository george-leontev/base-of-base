{
    "cells": [
        {
            "language": "typescript",
            "source": [
                "function gooseFilter (birds: string[]): string[] {\r\n    const geese: string[] = [\"African\", \"Roman Tufted\", \"Toulouse\", \"Pilgrim\", \"Steinbacher\"];\r\n    \r\n    return birds.filter(b => !geese.includes(b));\r\n}\r\n\r\ngooseFilter([\"Mallard\", \"Hook Bill\", \"African\", \"Crested\", \"Pilgrim\", \"Toulouse\", \"Blue Swedish\"]);"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[32m'Mallard'\u001b[39m,",
                                "  \u001b[32m'Hook Bill'\u001b[39m,",
                                "  \u001b[32m'Crested'\u001b[39m,",
                                "  \u001b[32m'Blue Swedish'\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "function findMultiples(integer: number, limit: number): number[] {\r\n    return [...Array(Math.floor(limit / integer))].map((_, i) => integer * (i + 1));\r\n}\r\n\r\nfindMultiples(11, 54);\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[33m11\u001b[39m,",
                                "  \u001b[33m22\u001b[39m,",
                                "  \u001b[33m33\u001b[39m,",
                                "  \u001b[33m44\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "/*\r\n100, if a grade for the exam is more than 90 or if a number of completed projects more than 10.\r\n90, if a grade for the exam is more than 75 and if a number of completed projects is minimum 5.\r\n75, if a grade for the exam is more than 50 and if a number of completed projects is minimum 2.\r\n0, in other cases\r\n*/\r\n\r\nexport function finalGrade (exam: number, projects: number): number {\r\n    return (\r\n        exam > 90 || projects > 10 \r\n        ? 100 \r\n        : (\r\n            exam > 75 && projects >= 5 \r\n            ? 90 \r\n            : (\r\n                exam > 50 && projects >= 2 \r\n                ? 75 \r\n                : 0\r\n            )\r\n        )\r\n    );\r\n}\r\n\r\n  finalGrade(85, 5)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m90\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "function between(a: number, b: number): number[] {\r\n    return [...Array(b - a + 1)].map((_, i) => a  + i);\r\n}\r\n\r\nbetween(1, 4)\r\nbetween(-2, 2)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[33m-2\u001b[39m,",
                                "  \u001b[33m-1\u001b[39m,",
                                "  \u001b[33m0\u001b[39m,",
                                "  \u001b[33m1\u001b[39m,",
                                "  \u001b[33m2\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "function betterThanAverage(classPoints: number[], yourPoints: number) : boolean {\r\n    return yourPoints > classPoints.reduce((p, c) => p + c) / classPoints.length;\r\n}\r\n\r\nbetterThanAverage([100, 40, 34, 57, 29, 72, 57, 88], 75)\r\nconst arr = [100, 40, 34, 57, 29, 72, 57, 88];\r\n\r\nconst a = arr.reduce((p, c) => p + c) / arr.length;\r\na"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "\r\nfunction correct(s: string): string {\r\n    const mapper: { [Key: string]: string } = {\r\n        '0': 'O',\r\n        '5': 'S',\r\n        '1': 'I'\r\n    };\r\n    \r\n    return Array.from(s).map(c => mapper[c] ?? c).reduce((p, c) => `${p}${c}`);\r\n}\r\n\r\ncorrect(\"L0ND0N\")\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[32m'LONDON'\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "function powersOfTwo(n:number):number[]{\r\n    return [...Array(n + 1)].map((_, i) => Math.pow(2, i));\r\n}\r\n\r\npowersOfTwo(0);\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[33m1\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "function index(array: number[], n: number): number {\r\n\r\n    return array.length -1 > n ? Math.pow(array[n], n)  : -1;\r\n}\r\n\r\nindex([1, 2, 3, 4], 2)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m9\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "const testEven = (n : number) : boolean => {\r\n    return n % 2 === 0\r\n}\r\n\r\ntestEven(1.5)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33mfalse\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "https://www.codewars.com/kata/55fd2d567d94ac3bc9000064/typescript\r\n// 1\r\n// 3     5\r\n// 7     9    11\r\n// 13    15    17    19\r\n// 21    23    25    27    29\r\n\r\n"
            ],
            "outputs": []
        }
    ]
}